# -*- coding: utf-8 -*-
"""Entrenamiento_con_Callbacks.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14pxAjDmE8MSLIJTYQusny6l2wkm05-n9
"""

from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau
from tensorflow.keras.utils import to_categorical

# Cargar datos de MNIST
(train_data, train_labels), (val_data, val_labels) = mnist.load_data()

# Preprocesamiento de los datos
train_data = train_data.reshape(-1, 28 * 28).astype('float32') / 255.0  # Aplanar y normalizar
val_data = val_data.reshape(-1, 28 * 28).astype('float32') / 255.0
train_labels = to_categorical(train_labels, 10)  # One-hot encoding
val_labels = to_categorical(val_labels, 10)

# Crear el modelo
model = Sequential([
    Dense(128, activation='relu', input_shape=(28 * 28,)),
    Dropout(0.5),
    Dense(64, activation='relu'),
    Dense(10, activation='softmax')
])

# Compilar el modelo
model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

# Definir callbacks
early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)
# Change the filepath to end with .keras
model_checkpoint = ModelCheckpoint(filepath='best_model_mnist.keras', monitor='val_loss', save_best_only=True)
reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=3)

# Entrenar el modelo
history = model.fit(
    x=train_data,
    y=train_labels,
    validation_data=(val_data, val_labels),
    epochs=20,
    batch_size=32,
    callbacks=[early_stopping, model_checkpoint, reduce_lr]
)


# Graficar la pérdida
plt.plot(history.history['loss'], label='Pérdida de entrenamiento')
plt.plot(history.history['val_loss'], label='Pérdida de validación')
plt.xlabel('Épocas')
plt.ylabel('Pérdida')
plt.legend()
plt.show()

# Graficar la precisión
plt.plot(history.history['accuracy'], label='Precisión de entrenamiento')
plt.plot(history.history['val_accuracy'], label='Precisión de validación')
plt.xlabel('Épocas')
plt.ylabel('Precisión')
plt.legend()
plt.show()